'use strict';

var _ = require('lodash');
var tokenUtils = require('./token-utils');
var syncRequest = require('sync-request');
var loggingUtils = require('./logger');
var logger = loggingUtils.getLogger('/Destination service');
var validators = require('../configuration/validators');
var xsenv = require('@sap/xsenv');

exports.attachDestinationServiceConfig = attachDestinationServiceConfig;
exports.adjustDestinationProperties = adjustDestinationProperties;
exports.normalizeDestinationProperties = normalizeDestinationProperties;

function attachDestinationServiceConfig(routes, envDestination) {
  var destinationOptions;
  var serviceDestinations = [];
  var missDestinations = _.map(
      _.uniqBy(routes,function(route){
        return route.destination ;
      }),'destination').
      filter(function (destinationName) {
        return destinationName && envDestination && !envDestination[destinationName];
      });
  if (missDestinations && missDestinations.length > 0) {
    logger.info('Looking for the missing environment destinations metadata: %s in destination service',missDestinations);
    destinationOptions = tokenUtils.getDestinationTokenAndUrl();
    if (!destinationOptions) {
      logger.error('missing access token for destination service');
      return;
    }
    missDestinations.forEach(function (destination) {
      var destinationMetaData = getDestinationSync(destination, destinationOptions);
      if (destinationMetaData) {
        serviceDestinations.push(destinationMetaData);
      }
    });
    normalizeDestinationProperties(serviceDestinations);
    validators.validateDestinations(serviceDestinations, true);
    adjustDestinationProperties(serviceDestinations);
    serviceDestinations.forEach(function (destination) {
      envDestination[destination.name] = destination;
    });
  }
}


function getDestinationSync(destinationName, destinationOptions) {
  var url = destinationOptions.uri + '/destination-configuration/v1/subaccountDestinations/' + destinationName;
  var requestOptions = {
    headers: {
      'accept': 'application/json;charset=utf-8',
      'Authorization': 'Bearer ' + destinationOptions.token.accessToken
    }
  };
  var res = syncRequest('GET', url, requestOptions);
  if (!res || res.statusCode !== 200) {
    if (res.statusCode === 404) {
      logger.warning('Route %s not found in the destination service', destinationName);
    } else {
      logger.error('Bad response from destination services : %s', JSON.stringify(res));
    }
    return;
  }
  var destinationMetaData;
  try {
    destinationMetaData = JSON.parse(res.body);
  } catch (err) {
    logger.error(err, 'unexpected response from destination service. Expected json, got: "%s"', res.body);
    return;
  }
  return destinationMetaData;
}

function adjustDestinationProperties(destinations) {
  destinations.forEach(function (destination) {
    if (destination.proxyType === 'OnPremise') {
      var credentials = xsenv.cfServiceCredentials({tag: 'connectivity'});
      destination['proxyHost'] = credentials.onpremise_proxy_host;
      destination['proxyPort'] = credentials.onpremise_proxy_port;
    }
    _.defaults(destination, {
      timeout: 30000
    });
  });
}
function normalizeDestinationProperties(destinations) {
  if (!destinations) {
    return;
  }
  destinations.forEach(function (destination, i, destinations) {
    destinations[i] = _.mapKeys(destination, function (value, key) {
      if (key === 'URL') {
        return key.toLowerCase();
      } else {
        return _.lowerFirst(key);
      }
    });
    destinations[i].forwardAuthToken = (destinations[i].forwardAuthToken === 'true');
  });
}