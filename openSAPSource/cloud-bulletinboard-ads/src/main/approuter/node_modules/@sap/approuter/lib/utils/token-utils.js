'use strict';

var xsenv = require('@sap/xsenv');
var validators = require('../configuration/validators');
var passportUtils = require('../passport/utils');
var loggerUtils = require('./logger');
var tracer = loggerUtils.getTracer(__filename);

var logger = loggerUtils.getLogger('/token-utils');
var VError = require('verror').VError;

exports.getProxyToken = getProxyToken;
exports.getDestinationTokenAndUrl = getDestinationTokenAndUrl;

function getDestinationTokenAndUrl(serviceCredentials) {
  try {
    serviceCredentials = serviceCredentials ? serviceCredentials : loadServiceCredentials('destination');
    serviceCredentials.label = 'destination';
    validators.validateDestinationCredentials(serviceCredentials);
    return {
      token: loadClientCredentialsTokenSync(serviceCredentials),
      uri: serviceCredentials.uri
    };
  } catch (e) {
    logger.error('can\'t get access token to the destination service :\n', e);
  }
}

function getProxyToken(app) {
  try {
    var credentials = xsenv.cfServiceCredentials({tag: 'connectivity'});
    validators.validateConnectivityCredentials(credentials);
    loadClientCredentialsToken(app, credentials, 'connProxyToken');
  } catch (e) {
    return;
  }
}

function loadServiceCredentials(serviceName, errMessage) {
  try {
    return xsenv.cfServiceCredentials({tag: serviceName});
  } catch (err) {
    throw new Error(errMessage || 'Error reading credentials for ' + serviceName + ' service. Please verify service is bound. ' + err);
  }
}

function loadClientCredentialsToken(app, credentials, tokenName) {
  var requestOptions = {
    url: credentials.url + '/oauth/token/?grant_type=client_credentials',
    headers: {
      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',
      'accept': 'application/json;charset=utf-8'
    },
    auth: {
      user: credentials.clientid,
      pass: credentials.clientsecret
    }
  };

  passportUtils.callUaa(requestOptions, null, function (err, uaaResponse) {
    if (err) {
      return tracer.error('Error getting ' + credentials.label + ' client credentials from UAA. Number of attempts done: %d, error: %s',
                passportUtils.MAX_ATTEMPTS_NUMBER, err.message);
    }

    if (!uaaResponse.access_token || !uaaResponse.expires_in) {
      return tracer.error('Bad response from UAA when getting client credentials token for ' + credentials.label + '- not all fields are present');
    }
    var options = {
      accessToken: uaaResponse.access_token,
      expiryDate: passportUtils.getExpiresAt(uaaResponse.expires_in).getTime()
    };
    app[tokenName] = options;
    var tokenRefreshTimestamp = options.expiryDate - toMilliseconds(5);
    var msBeforeRetrieval = tokenRefreshTimestamp - Date.now();
    executeAfter(function () {
      loadClientCredentialsToken(app, credentials, tokenName);
    }, msBeforeRetrieval);
  });
}

function loadClientCredentialsTokenSync(credentials) {
  var url = credentials.url + '/oauth/token/?grant_type=client_credentials';
  var requestOptions = {
    headers: {
      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',
      'accept': 'application/json;charset=utf-8',
      'authorization': 'Basic ' + Buffer(credentials.clientid + ':' + credentials.clientsecret).toString('base64')
    }
  };
  var uaaResponse = passportUtils.callUaaSync(url, requestOptions);
  if (!uaaResponse.access_token || !uaaResponse.expires_in) {
    throw new VError('Bad response from UAA when getting client credentials token for ' + credentials.label + '- not all fields are present');
  }
  return {
    accessToken: uaaResponse.access_token,
    expiryDate: passportUtils.getExpiresAt(uaaResponse.expires_in).getTime()
  };
}


function executeAfter(fn, timeout) {
  setTimeout(fn, timeout);
}

function toMilliseconds(minutes) {
  return minutes * 60 * 1000;
}